// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     alert.avsc
 *     candidate.avsc
 *     cutout.avsc
 *     fp_hist.avsc
 *     prv_candidate.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

// avro alert schema
type Candidate struct {

	
	// Observation Julian date at start of exposure [days]
	
	
		Jd float64
	

	
	// Filter ID (1=g; 2=R; 3=i)
	
	
		Fid int32
	

	
	// Processing ID for science image to facilitate archive retrieval
	
	
		Pid int64
	

	
	// Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
	
	
		Diffmaglim *UnionNullFloat
	

	
	// filename of positive (sci minus ref) difference image
	
	
		Pdiffimfilename *UnionNullString
	

	
	// Principal investigator attached to program ID
	
	
		Programpi *UnionNullString
	

	
	// Program ID: encodes either public, collab, or caltech mode
	
	
		Programid int32
	

	
	// Candidate ID from operations DB
	
	
		Candid int64
	

	
	// t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
	
	
		Isdiffpos string
	

	
	// Internal pipeline table extraction ID
	
	
		Tblid *UnionNullLong
	

	
	// Night ID
	
	
		Nid *UnionNullInt
	

	
	// Readout channel ID [00 .. 63]
	
	
		Rcid *UnionNullInt
	

	
	// ZTF field ID
	
	
		Field *UnionNullInt
	

	
	// x-image position of candidate [pixels]
	
	
		Xpos *UnionNullFloat
	

	
	// y-image position of candidate [pixels]
	
	
		Ypos *UnionNullFloat
	

	
	// Right Ascension of candidate; J2000 [deg]
	
	
		Ra float64
	

	
	// Declination of candidate; J2000 [deg]
	
	
		Dec float64
	

	
	// Magnitude from PSF-fit photometry [mag]
	
	
		Magpsf float32
	

	
	// 1-sigma uncertainty in magpsf [mag]
	
	
		Sigmapsf float32
	

	
	// Reduced chi-square for PSF-fit
	
	
		Chipsf *UnionNullFloat
	

	
	// Aperture mag using 14 pixel diameter aperture [mag]
	
	
		Magap *UnionNullFloat
	

	
	// 1-sigma uncertainty in magap [mag]
	
	
		Sigmagap *UnionNullFloat
	

	
	// distance to nearest source in reference image PSF-catalog [pixels]
	
	
		Distnr *UnionNullFloat
	

	
	// magnitude of nearest source in reference image PSF-catalog [mag]
	
	
		Magnr *UnionNullFloat
	

	
	// 1-sigma uncertainty in magnr [mag]
	
	
		Sigmagnr *UnionNullFloat
	

	
	// DAOPhot chi parameter of nearest source in reference image PSF-catalog
	
	
		Chinr *UnionNullFloat
	

	
	// DAOPhot sharp parameter of nearest source in reference image PSF-catalog
	
	
		Sharpnr *UnionNullFloat
	

	
	// Local sky background estimate [DN]
	
	
		Sky *UnionNullFloat
	

	
	// Difference: magap - magpsf [mag]
	
	
		Magdiff *UnionNullFloat
	

	
	// Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
	
	
		Fwhm *UnionNullFloat
	

	
	// Star/Galaxy classification score from SExtractor
	
	
		Classtar *UnionNullFloat
	

	
	// Distance to nearest edge in image [pixels]
	
	
		Mindtoedge *UnionNullFloat
	

	
	// Difference: diffmaglim - magap [mag]
	
	
		Magfromlim *UnionNullFloat
	

	
	// Ratio: difffwhm / fwhm
	
	
		Seeratio *UnionNullFloat
	

	
	// Windowed profile RMS afloat major axis from SExtractor [pixels]
	
	
		Aimage *UnionNullFloat
	

	
	// Windowed profile RMS afloat minor axis from SExtractor [pixels]
	
	
		Bimage *UnionNullFloat
	

	
	// Ratio: aimage / fwhm
	
	
		Aimagerat *UnionNullFloat
	

	
	// Ratio: bimage / fwhm
	
	
		Bimagerat *UnionNullFloat
	

	
	// Ratio: aimage / bimage
	
	
		Elong *UnionNullFloat
	

	
	// number of negative pixels in a 5 x 5 pixel stamp
	
	
		Nneg *UnionNullInt
	

	
	// number of prior-tagged bad pixels in a 5 x 5 pixel stamp
	
	
		Nbad *UnionNullInt
	

	
	// RealBogus quality score from Random Forest classifier; range is 0 to 1 where closer to 1 is more reliable
	
	
		Rb *UnionNullFloat
	

	
	// distance to nearest known solar system object if exists within 30 arcsec [arcsec]
	
	
		Ssdistnr *UnionNullFloat
	

	
	// magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
	
	
		Ssmagnr *UnionNullFloat
	

	
	// name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
	
	
		Ssnamenr *UnionNullString
	

	
	// Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
	
	
		Sumrat *UnionNullFloat
	

	
	// Aperture mag using 18 pixel diameter aperture [mag]
	
	
		Magapbig *UnionNullFloat
	

	
	// 1-sigma uncertainty in magapbig [mag]
	
	
		Sigmagapbig *UnionNullFloat
	

	
	// Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
	
	
		Ranr float64
	

	
	// Declination of nearest source in reference image PSF-catalog; J2000 [deg]
	
	
		Decnr float64
	

	
	// g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Sgmag1 *UnionNullFloat
	

	
	// r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Srmag1 *UnionNullFloat
	

	
	// i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Simag1 *UnionNullFloat
	

	
	// z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Szmag1 *UnionNullFloat
	

	
	// Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
	
	
		Sgscore1 *UnionNullFloat
	

	
	// Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
	
	
		Distpsnr1 *UnionNullFloat
	

	
	// Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted. All raw detections down to a photometric S/N of ~ 3 are included.
	
	
		Ndethist int32
	

	
	// Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
	
	
		Ncovhist int32
	

	
	// Earliest Julian date of epoch corresponding to ndethist [days]
	
	
		Jdstarthist *UnionNullDouble
	

	
	// Latest Julian date of epoch corresponding to ndethist [days]
	
	
		Jdendhist *UnionNullDouble
	

	
	// Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
	
	
		Scorr *UnionNullDouble
	

	
	// 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
	
	
		Tooflag *UnionNullInt
	

	
	// Object ID of closest source from PS1 catalog; if exists within 30 arcsec
	
	
		Objectidps1 *UnionNullLong
	

	
	// Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
	
	
		Objectidps2 *UnionNullLong
	

	
	// g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Sgmag2 *UnionNullFloat
	

	
	// r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Srmag2 *UnionNullFloat
	

	
	// i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Simag2 *UnionNullFloat
	

	
	// z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Szmag2 *UnionNullFloat
	

	
	// Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
	
	
		Sgscore2 *UnionNullFloat
	

	
	// Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
	
	
		Distpsnr2 *UnionNullFloat
	

	
	// Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
	
	
		Objectidps3 *UnionNullLong
	

	
	// g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Sgmag3 *UnionNullFloat
	

	
	// r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Srmag3 *UnionNullFloat
	

	
	// i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Simag3 *UnionNullFloat
	

	
	// z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
	
	
		Szmag3 *UnionNullFloat
	

	
	// Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
	
	
		Sgscore3 *UnionNullFloat
	

	
	// Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
	
	
		Distpsnr3 *UnionNullFloat
	

	
	// Number of source matches from PS1 catalog falling within 30 arcsec
	
	
		Nmtchps int32
	

	
	// Processing ID for reference image to facilitate archive retrieval
	
	
		Rfid int64
	

	
	// Observation Julian date of earliest exposure used to generate reference image [days]
	
	
		Jdstartref float64
	

	
	// Observation Julian date of latest exposure used to generate reference image [days]
	
	
		Jdendref float64
	

	
	// Number of frames (epochal images) used to generate reference image
	
	
		Nframesref int32
	

	
	// version of Random Forest classifier model used to assign RealBogus (rb) quality score
	
	
		Rbversion string
	

	
	// Ratio: D/stddev(D) on event position where D = difference image
	
	
		Dsnrms *UnionNullFloat
	

	
	// Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
	
	
		Ssnrms *UnionNullFloat
	

	
	// Difference of statistics: dsnrms - ssnrms
	
	
		Dsdiff *UnionNullFloat
	

	
	// Magnitude zero point for photometry estimates [mag]
	
	
		Magzpsci *UnionNullFloat
	

	
	// Magnitude zero point uncertainty (in magzpsci) [mag]
	
	
		Magzpsciunc *UnionNullFloat
	

	
	// RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
	
	
		Magzpscirms *UnionNullFloat
	

	
	// Number of PS1 photometric calibrators used to calibrate science image from science image processing
	
	
		Nmatches int32
	

	
	// Color coefficient from linear fit from photometric calibration of science image
	
	
		Clrcoeff *UnionNullFloat
	

	
	// Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
	
	
		Clrcounc *UnionNullFloat
	

	
	// Covariance in magzpsci and clrcoeff from science image processing [mag^2]
	
	
		Zpclrcov *UnionNullFloat
	

	
	// Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
	
	
		Zpmed *UnionNullFloat
	

	
	// Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
	
	
		Clrmed *UnionNullFloat
	

	
	// RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
	
	
		Clrrms *UnionNullFloat
	

	
	// Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
	
	
		Neargaia *UnionNullFloat
	

	
	// Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
	
	
		Neargaiabright *UnionNullFloat
	

	
	// Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
	
	
		Maggaia *UnionNullFloat
	

	
	// Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
	
	
		Maggaiabright *UnionNullFloat
	

	
	// Integration time of camera exposure [sec]
	
	
		Exptime *UnionNullFloat
	

	
	// RealBogus quality score from Deep-Learning-based classifier; range is 0 to 1 where closer to 1 is more reliable
	
	
		Drb *UnionNullFloat
	

	
	// version of Deep-Learning-based classifier model used to assign RealBogus (drb) quality score
	
	
		Drbversion string
	

}

const CandidateAvroCRC64Fingerprint = "R|K\xfa\x1cm\x0f\xe1"

func NewCandidate() (*Candidate) {
	return &Candidate{}
}

func DeserializeCandidate(r io.Reader) (*Candidate, error) {
	t := NewCandidate()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeCandidateFromSchema(r io.Reader, schema string) (*Candidate, error) {
	t := NewCandidate()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeCandidate(r *Candidate, w io.Writer) error {
	var err error
	
	err = vm.WriteDouble( r.Jd, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Fid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Pid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Diffmaglim, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Pdiffimfilename, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Programpi, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Programid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Candid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.Isdiffpos, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.Tblid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Nid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Rcid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Field, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Xpos, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ypos, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Ra, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Dec, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.Magpsf, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.Sigmapsf, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Chipsf, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magap, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmagap, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Distnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmagnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Chinr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sharpnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sky, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magdiff, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Fwhm, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Classtar, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Mindtoedge, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magfromlim, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Seeratio, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Aimage, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Bimage, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Aimagerat, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Bimagerat, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Elong, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Nneg, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Nbad, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Rb, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ssdistnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ssmagnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Ssnamenr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sumrat, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magapbig, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmagapbig, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Ranr, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Decnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sgmag1, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Srmag1, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Simag1, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Szmag1, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sgscore1, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Distpsnr1, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Ndethist, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Ncovhist, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Jdstarthist, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Jdendhist, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Scorr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Tooflag, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.Objectidps1, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.Objectidps2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sgmag2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Srmag2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Simag2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Szmag2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sgscore2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Distpsnr2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.Objectidps3, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sgmag3, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Srmag3, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Simag3, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Szmag3, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sgscore3, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Distpsnr3, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Nmtchps, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Rfid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Jdstartref, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Jdendref, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Nframesref, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.Rbversion, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Dsnrms, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ssnrms, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Dsdiff, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpsci, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpsciunc, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpscirms, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Nmatches, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrcoeff, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrcounc, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Zpclrcov, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Zpmed, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrmed, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrrms, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Neargaia, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Neargaiabright, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Maggaia, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Maggaiabright, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Exptime, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Drb, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.Drbversion, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *Candidate) Serialize(w io.Writer) error {
	return writeCandidate(r, w)
}

func (r *Candidate) Schema() string {
	return "{\"doc\":\"avro alert schema\",\"fields\":[{\"doc\":\"Observation Julian date at start of exposure [days]\",\"name\":\"jd\",\"type\":\"double\"},{\"doc\":\"Filter ID (1=g; 2=R; 3=i)\",\"name\":\"fid\",\"type\":\"int\"},{\"doc\":\"Processing ID for science image to facilitate archive retrieval\",\"name\":\"pid\",\"type\":\"long\"},{\"default\":null,\"doc\":\"Expected 5-sigma mag limit in difference image based on global noise estimate [mag]\",\"name\":\"diffmaglim\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"filename of positive (sci minus ref) difference image\",\"name\":\"pdiffimfilename\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"doc\":\"Principal investigator attached to program ID\",\"name\":\"programpi\",\"type\":[\"null\",\"string\"]},{\"doc\":\"Program ID: encodes either public, collab, or caltech mode\",\"name\":\"programid\",\"type\":\"int\"},{\"doc\":\"Candidate ID from operations DB\",\"name\":\"candid\",\"type\":\"long\"},{\"doc\":\"t or 1 =\\u003e candidate is from positive (sci minus ref) subtraction; f or 0 =\\u003e candidate is from negative (ref minus sci) subtraction\",\"name\":\"isdiffpos\",\"type\":\"string\"},{\"default\":null,\"doc\":\"Internal pipeline table extraction ID\",\"name\":\"tblid\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"doc\":\"Night ID\",\"name\":\"nid\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"Readout channel ID [00 .. 63]\",\"name\":\"rcid\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"ZTF field ID\",\"name\":\"field\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"x-image position of candidate [pixels]\",\"name\":\"xpos\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"y-image position of candidate [pixels]\",\"name\":\"ypos\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Right Ascension of candidate; J2000 [deg]\",\"name\":\"ra\",\"type\":\"double\"},{\"doc\":\"Declination of candidate; J2000 [deg]\",\"name\":\"dec\",\"type\":\"double\"},{\"doc\":\"Magnitude from PSF-fit photometry [mag]\",\"name\":\"magpsf\",\"type\":\"float\"},{\"doc\":\"1-sigma uncertainty in magpsf [mag]\",\"name\":\"sigmapsf\",\"type\":\"float\"},{\"default\":null,\"doc\":\"Reduced chi-square for PSF-fit\",\"name\":\"chipsf\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Aperture mag using 14 pixel diameter aperture [mag]\",\"name\":\"magap\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in magap [mag]\",\"name\":\"sigmagap\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"distance to nearest source in reference image PSF-catalog [pixels]\",\"name\":\"distnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"magnitude of nearest source in reference image PSF-catalog [mag]\",\"name\":\"magnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in magnr [mag]\",\"name\":\"sigmagnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"DAOPhot chi parameter of nearest source in reference image PSF-catalog\",\"name\":\"chinr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"DAOPhot sharp parameter of nearest source in reference image PSF-catalog\",\"name\":\"sharpnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Local sky background estimate [DN]\",\"name\":\"sky\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Difference: magap - magpsf [mag]\",\"name\":\"magdiff\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]\",\"name\":\"fwhm\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Star/Galaxy classification score from SExtractor\",\"name\":\"classtar\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Distance to nearest edge in image [pixels]\",\"name\":\"mindtoedge\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Difference: diffmaglim - magap [mag]\",\"name\":\"magfromlim\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: difffwhm / fwhm\",\"name\":\"seeratio\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Windowed profile RMS afloat major axis from SExtractor [pixels]\",\"name\":\"aimage\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Windowed profile RMS afloat minor axis from SExtractor [pixels]\",\"name\":\"bimage\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: aimage / fwhm\",\"name\":\"aimagerat\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: bimage / fwhm\",\"name\":\"bimagerat\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: aimage / bimage\",\"name\":\"elong\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"number of negative pixels in a 5 x 5 pixel stamp\",\"name\":\"nneg\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"number of prior-tagged bad pixels in a 5 x 5 pixel stamp\",\"name\":\"nbad\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"RealBogus quality score from Random Forest classifier; range is 0 to 1 where closer to 1 is more reliable\",\"name\":\"rb\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"distance to nearest known solar system object if exists within 30 arcsec [arcsec]\",\"name\":\"ssdistnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]\",\"name\":\"ssmagnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"name of nearest known solar system object if exists within 30 arcsec (from MPC archive)\",\"name\":\"ssnamenr\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"doc\":\"Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers\",\"name\":\"sumrat\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Aperture mag using 18 pixel diameter aperture [mag]\",\"name\":\"magapbig\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in magapbig [mag]\",\"name\":\"sigmagapbig\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]\",\"name\":\"ranr\",\"type\":\"double\"},{\"doc\":\"Declination of nearest source in reference image PSF-catalog; J2000 [deg]\",\"name\":\"decnr\",\"type\":\"double\"},{\"default\":null,\"doc\":\"g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"sgmag1\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"srmag1\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"simag1\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"szmag1\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 \\u003c= sgscore \\u003c= 1 where closer to 1 implies higher likelihood of being a star\",\"name\":\"sgscore1\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]\",\"name\":\"distpsnr1\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted. All raw detections down to a photometric S/N of ~ 3 are included.\",\"name\":\"ndethist\",\"type\":\"int\"},{\"doc\":\"Number of times input candidate position fell on any field and readout-channel going back to beginning of survey\",\"name\":\"ncovhist\",\"type\":\"int\"},{\"default\":null,\"doc\":\"Earliest Julian date of epoch corresponding to ndethist [days]\",\"name\":\"jdstarthist\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"doc\":\"Latest Julian date of epoch corresponding to ndethist [days]\",\"name\":\"jdendhist\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"doc\":\"Peak-pixel signal-to-noise ratio in point source matched-filtered detection image\",\"name\":\"scorr\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"doc\":\"1 =\\u003e candidate is from a Target-of-Opportunity (ToO) exposure; 0 =\\u003e candidate is from a non-ToO exposure\",\"name\":\"tooflag\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"Object ID of closest source from PS1 catalog; if exists within 30 arcsec\",\"name\":\"objectidps1\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"doc\":\"Object ID of second closest source from PS1 catalog; if exists within 30 arcsec\",\"name\":\"objectidps2\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"doc\":\"g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"sgmag2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"srmag2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"simag2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"szmag2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 \\u003c= sgscore \\u003c= 1 where closer to 1 implies higher likelihood of being a star\",\"name\":\"sgscore2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]\",\"name\":\"distpsnr2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Object ID of third closest source from PS1 catalog; if exists within 30 arcsec\",\"name\":\"objectidps3\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"doc\":\"g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"sgmag3\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"srmag3\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"simag3\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"name\":\"szmag3\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 \\u003c= sgscore \\u003c= 1 where closer to 1 implies higher likelihood of being a star\",\"name\":\"sgscore3\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]\",\"name\":\"distpsnr3\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Number of source matches from PS1 catalog falling within 30 arcsec\",\"name\":\"nmtchps\",\"type\":\"int\"},{\"doc\":\"Processing ID for reference image to facilitate archive retrieval\",\"name\":\"rfid\",\"type\":\"long\"},{\"doc\":\"Observation Julian date of earliest exposure used to generate reference image [days]\",\"name\":\"jdstartref\",\"type\":\"double\"},{\"doc\":\"Observation Julian date of latest exposure used to generate reference image [days]\",\"name\":\"jdendref\",\"type\":\"double\"},{\"doc\":\"Number of frames (epochal images) used to generate reference image\",\"name\":\"nframesref\",\"type\":\"int\"},{\"doc\":\"version of Random Forest classifier model used to assign RealBogus (rb) quality score\",\"name\":\"rbversion\",\"type\":\"string\"},{\"default\":null,\"doc\":\"Ratio: D/stddev(D) on event position where D = difference image\",\"name\":\"dsnrms\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)\",\"name\":\"ssnrms\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Difference of statistics: dsnrms - ssnrms\",\"name\":\"dsdiff\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Magnitude zero point for photometry estimates [mag]\",\"name\":\"magzpsci\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Magnitude zero point uncertainty (in magzpsci) [mag]\",\"name\":\"magzpsciunc\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]\",\"name\":\"magzpscirms\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Number of PS1 photometric calibrators used to calibrate science image from science image processing\",\"name\":\"nmatches\",\"type\":\"int\"},{\"default\":null,\"doc\":\"Color coefficient from linear fit from photometric calibration of science image\",\"name\":\"clrcoeff\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Color coefficient uncertainty from linear fit (corresponding to clrcoeff)\",\"name\":\"clrcounc\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Covariance in magzpsci and clrcoeff from science image processing [mag^2]\",\"name\":\"zpclrcov\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]\",\"name\":\"zpmed\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively\",\"name\":\"clrmed\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]\",\"name\":\"clrrms\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]\",\"name\":\"neargaia\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]\",\"name\":\"neargaiabright\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]\",\"name\":\"maggaia\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]\",\"name\":\"maggaiabright\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Integration time of camera exposure [sec]\",\"name\":\"exptime\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"RealBogus quality score from Deep-Learning-based classifier; range is 0 to 1 where closer to 1 is more reliable\",\"name\":\"drb\",\"type\":[\"null\",\"float\"]},{\"doc\":\"version of Deep-Learning-based classifier model used to assign RealBogus (drb) quality score\",\"name\":\"drbversion\",\"type\":\"string\"}],\"name\":\"ztf.alert.candidate\",\"type\":\"record\",\"version\":\"4.02\"}"
}

func (r *Candidate) SchemaName() string {
	return "ztf.alert.candidate"
}

func (_ *Candidate) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *Candidate) SetInt(v int32) { panic("Unsupported operation") }
func (_ *Candidate) SetLong(v int64) { panic("Unsupported operation") }
func (_ *Candidate) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *Candidate) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *Candidate) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *Candidate) SetString(v string) { panic("Unsupported operation") }
func (_ *Candidate) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Candidate) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Double)(&r.Jd)
		
	
	case 1:
		
		
			return (*types.Int)(&r.Fid)
		
	
	case 2:
		
		
			return (*types.Long)(&r.Pid)
		
	
	case 3:
		
			r.Diffmaglim = NewUnionNullFloat()

		
		
			return r.Diffmaglim
		
	
	case 4:
		
			r.Pdiffimfilename = NewUnionNullString()

		
		
			return r.Pdiffimfilename
		
	
	case 5:
		
			r.Programpi = NewUnionNullString()

		
		
			return r.Programpi
		
	
	case 6:
		
		
			return (*types.Int)(&r.Programid)
		
	
	case 7:
		
		
			return (*types.Long)(&r.Candid)
		
	
	case 8:
		
		
			return (*types.String)(&r.Isdiffpos)
		
	
	case 9:
		
			r.Tblid = NewUnionNullLong()

		
		
			return r.Tblid
		
	
	case 10:
		
			r.Nid = NewUnionNullInt()

		
		
			return r.Nid
		
	
	case 11:
		
			r.Rcid = NewUnionNullInt()

		
		
			return r.Rcid
		
	
	case 12:
		
			r.Field = NewUnionNullInt()

		
		
			return r.Field
		
	
	case 13:
		
			r.Xpos = NewUnionNullFloat()

		
		
			return r.Xpos
		
	
	case 14:
		
			r.Ypos = NewUnionNullFloat()

		
		
			return r.Ypos
		
	
	case 15:
		
		
			return (*types.Double)(&r.Ra)
		
	
	case 16:
		
		
			return (*types.Double)(&r.Dec)
		
	
	case 17:
		
		
			return (*types.Float)(&r.Magpsf)
		
	
	case 18:
		
		
			return (*types.Float)(&r.Sigmapsf)
		
	
	case 19:
		
			r.Chipsf = NewUnionNullFloat()

		
		
			return r.Chipsf
		
	
	case 20:
		
			r.Magap = NewUnionNullFloat()

		
		
			return r.Magap
		
	
	case 21:
		
			r.Sigmagap = NewUnionNullFloat()

		
		
			return r.Sigmagap
		
	
	case 22:
		
			r.Distnr = NewUnionNullFloat()

		
		
			return r.Distnr
		
	
	case 23:
		
			r.Magnr = NewUnionNullFloat()

		
		
			return r.Magnr
		
	
	case 24:
		
			r.Sigmagnr = NewUnionNullFloat()

		
		
			return r.Sigmagnr
		
	
	case 25:
		
			r.Chinr = NewUnionNullFloat()

		
		
			return r.Chinr
		
	
	case 26:
		
			r.Sharpnr = NewUnionNullFloat()

		
		
			return r.Sharpnr
		
	
	case 27:
		
			r.Sky = NewUnionNullFloat()

		
		
			return r.Sky
		
	
	case 28:
		
			r.Magdiff = NewUnionNullFloat()

		
		
			return r.Magdiff
		
	
	case 29:
		
			r.Fwhm = NewUnionNullFloat()

		
		
			return r.Fwhm
		
	
	case 30:
		
			r.Classtar = NewUnionNullFloat()

		
		
			return r.Classtar
		
	
	case 31:
		
			r.Mindtoedge = NewUnionNullFloat()

		
		
			return r.Mindtoedge
		
	
	case 32:
		
			r.Magfromlim = NewUnionNullFloat()

		
		
			return r.Magfromlim
		
	
	case 33:
		
			r.Seeratio = NewUnionNullFloat()

		
		
			return r.Seeratio
		
	
	case 34:
		
			r.Aimage = NewUnionNullFloat()

		
		
			return r.Aimage
		
	
	case 35:
		
			r.Bimage = NewUnionNullFloat()

		
		
			return r.Bimage
		
	
	case 36:
		
			r.Aimagerat = NewUnionNullFloat()

		
		
			return r.Aimagerat
		
	
	case 37:
		
			r.Bimagerat = NewUnionNullFloat()

		
		
			return r.Bimagerat
		
	
	case 38:
		
			r.Elong = NewUnionNullFloat()

		
		
			return r.Elong
		
	
	case 39:
		
			r.Nneg = NewUnionNullInt()

		
		
			return r.Nneg
		
	
	case 40:
		
			r.Nbad = NewUnionNullInt()

		
		
			return r.Nbad
		
	
	case 41:
		
			r.Rb = NewUnionNullFloat()

		
		
			return r.Rb
		
	
	case 42:
		
			r.Ssdistnr = NewUnionNullFloat()

		
		
			return r.Ssdistnr
		
	
	case 43:
		
			r.Ssmagnr = NewUnionNullFloat()

		
		
			return r.Ssmagnr
		
	
	case 44:
		
			r.Ssnamenr = NewUnionNullString()

		
		
			return r.Ssnamenr
		
	
	case 45:
		
			r.Sumrat = NewUnionNullFloat()

		
		
			return r.Sumrat
		
	
	case 46:
		
			r.Magapbig = NewUnionNullFloat()

		
		
			return r.Magapbig
		
	
	case 47:
		
			r.Sigmagapbig = NewUnionNullFloat()

		
		
			return r.Sigmagapbig
		
	
	case 48:
		
		
			return (*types.Double)(&r.Ranr)
		
	
	case 49:
		
		
			return (*types.Double)(&r.Decnr)
		
	
	case 50:
		
			r.Sgmag1 = NewUnionNullFloat()

		
		
			return r.Sgmag1
		
	
	case 51:
		
			r.Srmag1 = NewUnionNullFloat()

		
		
			return r.Srmag1
		
	
	case 52:
		
			r.Simag1 = NewUnionNullFloat()

		
		
			return r.Simag1
		
	
	case 53:
		
			r.Szmag1 = NewUnionNullFloat()

		
		
			return r.Szmag1
		
	
	case 54:
		
			r.Sgscore1 = NewUnionNullFloat()

		
		
			return r.Sgscore1
		
	
	case 55:
		
			r.Distpsnr1 = NewUnionNullFloat()

		
		
			return r.Distpsnr1
		
	
	case 56:
		
		
			return (*types.Int)(&r.Ndethist)
		
	
	case 57:
		
		
			return (*types.Int)(&r.Ncovhist)
		
	
	case 58:
		
			r.Jdstarthist = NewUnionNullDouble()

		
		
			return r.Jdstarthist
		
	
	case 59:
		
			r.Jdendhist = NewUnionNullDouble()

		
		
			return r.Jdendhist
		
	
	case 60:
		
			r.Scorr = NewUnionNullDouble()

		
		
			return r.Scorr
		
	
	case 61:
		
			r.Tooflag = NewUnionNullInt()

		
		
			return r.Tooflag
		
	
	case 62:
		
			r.Objectidps1 = NewUnionNullLong()

		
		
			return r.Objectidps1
		
	
	case 63:
		
			r.Objectidps2 = NewUnionNullLong()

		
		
			return r.Objectidps2
		
	
	case 64:
		
			r.Sgmag2 = NewUnionNullFloat()

		
		
			return r.Sgmag2
		
	
	case 65:
		
			r.Srmag2 = NewUnionNullFloat()

		
		
			return r.Srmag2
		
	
	case 66:
		
			r.Simag2 = NewUnionNullFloat()

		
		
			return r.Simag2
		
	
	case 67:
		
			r.Szmag2 = NewUnionNullFloat()

		
		
			return r.Szmag2
		
	
	case 68:
		
			r.Sgscore2 = NewUnionNullFloat()

		
		
			return r.Sgscore2
		
	
	case 69:
		
			r.Distpsnr2 = NewUnionNullFloat()

		
		
			return r.Distpsnr2
		
	
	case 70:
		
			r.Objectidps3 = NewUnionNullLong()

		
		
			return r.Objectidps3
		
	
	case 71:
		
			r.Sgmag3 = NewUnionNullFloat()

		
		
			return r.Sgmag3
		
	
	case 72:
		
			r.Srmag3 = NewUnionNullFloat()

		
		
			return r.Srmag3
		
	
	case 73:
		
			r.Simag3 = NewUnionNullFloat()

		
		
			return r.Simag3
		
	
	case 74:
		
			r.Szmag3 = NewUnionNullFloat()

		
		
			return r.Szmag3
		
	
	case 75:
		
			r.Sgscore3 = NewUnionNullFloat()

		
		
			return r.Sgscore3
		
	
	case 76:
		
			r.Distpsnr3 = NewUnionNullFloat()

		
		
			return r.Distpsnr3
		
	
	case 77:
		
		
			return (*types.Int)(&r.Nmtchps)
		
	
	case 78:
		
		
			return (*types.Long)(&r.Rfid)
		
	
	case 79:
		
		
			return (*types.Double)(&r.Jdstartref)
		
	
	case 80:
		
		
			return (*types.Double)(&r.Jdendref)
		
	
	case 81:
		
		
			return (*types.Int)(&r.Nframesref)
		
	
	case 82:
		
		
			return (*types.String)(&r.Rbversion)
		
	
	case 83:
		
			r.Dsnrms = NewUnionNullFloat()

		
		
			return r.Dsnrms
		
	
	case 84:
		
			r.Ssnrms = NewUnionNullFloat()

		
		
			return r.Ssnrms
		
	
	case 85:
		
			r.Dsdiff = NewUnionNullFloat()

		
		
			return r.Dsdiff
		
	
	case 86:
		
			r.Magzpsci = NewUnionNullFloat()

		
		
			return r.Magzpsci
		
	
	case 87:
		
			r.Magzpsciunc = NewUnionNullFloat()

		
		
			return r.Magzpsciunc
		
	
	case 88:
		
			r.Magzpscirms = NewUnionNullFloat()

		
		
			return r.Magzpscirms
		
	
	case 89:
		
		
			return (*types.Int)(&r.Nmatches)
		
	
	case 90:
		
			r.Clrcoeff = NewUnionNullFloat()

		
		
			return r.Clrcoeff
		
	
	case 91:
		
			r.Clrcounc = NewUnionNullFloat()

		
		
			return r.Clrcounc
		
	
	case 92:
		
			r.Zpclrcov = NewUnionNullFloat()

		
		
			return r.Zpclrcov
		
	
	case 93:
		
			r.Zpmed = NewUnionNullFloat()

		
		
			return r.Zpmed
		
	
	case 94:
		
			r.Clrmed = NewUnionNullFloat()

		
		
			return r.Clrmed
		
	
	case 95:
		
			r.Clrrms = NewUnionNullFloat()

		
		
			return r.Clrrms
		
	
	case 96:
		
			r.Neargaia = NewUnionNullFloat()

		
		
			return r.Neargaia
		
	
	case 97:
		
			r.Neargaiabright = NewUnionNullFloat()

		
		
			return r.Neargaiabright
		
	
	case 98:
		
			r.Maggaia = NewUnionNullFloat()

		
		
			return r.Maggaia
		
	
	case 99:
		
			r.Maggaiabright = NewUnionNullFloat()

		
		
			return r.Maggaiabright
		
	
	case 100:
		
			r.Exptime = NewUnionNullFloat()

		
		
			return r.Exptime
		
	
	case 101:
		
			r.Drb = NewUnionNullFloat()

		
		
			return r.Drb
		
	
	case 102:
		
		
			return (*types.String)(&r.Drbversion)
		
	
	}
	panic("Unknown field index")
}

func (r *Candidate) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	case 3:
       	 	r.Diffmaglim = NewUnionNullFloat()

		return
	
	
        
	case 4:
       	 	r.Pdiffimfilename = NewUnionNullString()

		return
	
	
        
	case 5:
       	 	r.Programpi = NewUnionNullString()

		return
	
	
        
	
        
	
        
	
        
	case 9:
       	 	r.Tblid = NewUnionNullLong()

		return
	
	
        
	case 10:
       	 	r.Nid = NewUnionNullInt()

		return
	
	
        
	case 11:
       	 	r.Rcid = NewUnionNullInt()

		return
	
	
        
	case 12:
       	 	r.Field = NewUnionNullInt()

		return
	
	
        
	case 13:
       	 	r.Xpos = NewUnionNullFloat()

		return
	
	
        
	case 14:
       	 	r.Ypos = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	
        
	
        
	case 19:
       	 	r.Chipsf = NewUnionNullFloat()

		return
	
	
        
	case 20:
       	 	r.Magap = NewUnionNullFloat()

		return
	
	
        
	case 21:
       	 	r.Sigmagap = NewUnionNullFloat()

		return
	
	
        
	case 22:
       	 	r.Distnr = NewUnionNullFloat()

		return
	
	
        
	case 23:
       	 	r.Magnr = NewUnionNullFloat()

		return
	
	
        
	case 24:
       	 	r.Sigmagnr = NewUnionNullFloat()

		return
	
	
        
	case 25:
       	 	r.Chinr = NewUnionNullFloat()

		return
	
	
        
	case 26:
       	 	r.Sharpnr = NewUnionNullFloat()

		return
	
	
        
	case 27:
       	 	r.Sky = NewUnionNullFloat()

		return
	
	
        
	case 28:
       	 	r.Magdiff = NewUnionNullFloat()

		return
	
	
        
	case 29:
       	 	r.Fwhm = NewUnionNullFloat()

		return
	
	
        
	case 30:
       	 	r.Classtar = NewUnionNullFloat()

		return
	
	
        
	case 31:
       	 	r.Mindtoedge = NewUnionNullFloat()

		return
	
	
        
	case 32:
       	 	r.Magfromlim = NewUnionNullFloat()

		return
	
	
        
	case 33:
       	 	r.Seeratio = NewUnionNullFloat()

		return
	
	
        
	case 34:
       	 	r.Aimage = NewUnionNullFloat()

		return
	
	
        
	case 35:
       	 	r.Bimage = NewUnionNullFloat()

		return
	
	
        
	case 36:
       	 	r.Aimagerat = NewUnionNullFloat()

		return
	
	
        
	case 37:
       	 	r.Bimagerat = NewUnionNullFloat()

		return
	
	
        
	case 38:
       	 	r.Elong = NewUnionNullFloat()

		return
	
	
        
	case 39:
       	 	r.Nneg = NewUnionNullInt()

		return
	
	
        
	case 40:
       	 	r.Nbad = NewUnionNullInt()

		return
	
	
        
	case 41:
       	 	r.Rb = NewUnionNullFloat()

		return
	
	
        
	case 42:
       	 	r.Ssdistnr = NewUnionNullFloat()

		return
	
	
        
	case 43:
       	 	r.Ssmagnr = NewUnionNullFloat()

		return
	
	
        
	case 44:
       	 	r.Ssnamenr = NewUnionNullString()

		return
	
	
        
	case 45:
       	 	r.Sumrat = NewUnionNullFloat()

		return
	
	
        
	case 46:
       	 	r.Magapbig = NewUnionNullFloat()

		return
	
	
        
	case 47:
       	 	r.Sigmagapbig = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	case 50:
       	 	r.Sgmag1 = NewUnionNullFloat()

		return
	
	
        
	case 51:
       	 	r.Srmag1 = NewUnionNullFloat()

		return
	
	
        
	case 52:
       	 	r.Simag1 = NewUnionNullFloat()

		return
	
	
        
	case 53:
       	 	r.Szmag1 = NewUnionNullFloat()

		return
	
	
        
	case 54:
       	 	r.Sgscore1 = NewUnionNullFloat()

		return
	
	
        
	case 55:
       	 	r.Distpsnr1 = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	case 58:
       	 	r.Jdstarthist = NewUnionNullDouble()

		return
	
	
        
	case 59:
       	 	r.Jdendhist = NewUnionNullDouble()

		return
	
	
        
	case 60:
       	 	r.Scorr = NewUnionNullDouble()

		return
	
	
        
	case 61:
       	 	r.Tooflag = NewUnionNullInt()

		return
	
	
        
	case 62:
       	 	r.Objectidps1 = NewUnionNullLong()

		return
	
	
        
	case 63:
       	 	r.Objectidps2 = NewUnionNullLong()

		return
	
	
        
	case 64:
       	 	r.Sgmag2 = NewUnionNullFloat()

		return
	
	
        
	case 65:
       	 	r.Srmag2 = NewUnionNullFloat()

		return
	
	
        
	case 66:
       	 	r.Simag2 = NewUnionNullFloat()

		return
	
	
        
	case 67:
       	 	r.Szmag2 = NewUnionNullFloat()

		return
	
	
        
	case 68:
       	 	r.Sgscore2 = NewUnionNullFloat()

		return
	
	
        
	case 69:
       	 	r.Distpsnr2 = NewUnionNullFloat()

		return
	
	
        
	case 70:
       	 	r.Objectidps3 = NewUnionNullLong()

		return
	
	
        
	case 71:
       	 	r.Sgmag3 = NewUnionNullFloat()

		return
	
	
        
	case 72:
       	 	r.Srmag3 = NewUnionNullFloat()

		return
	
	
        
	case 73:
       	 	r.Simag3 = NewUnionNullFloat()

		return
	
	
        
	case 74:
       	 	r.Szmag3 = NewUnionNullFloat()

		return
	
	
        
	case 75:
       	 	r.Sgscore3 = NewUnionNullFloat()

		return
	
	
        
	case 76:
       	 	r.Distpsnr3 = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	case 83:
       	 	r.Dsnrms = NewUnionNullFloat()

		return
	
	
        
	case 84:
       	 	r.Ssnrms = NewUnionNullFloat()

		return
	
	
        
	case 85:
       	 	r.Dsdiff = NewUnionNullFloat()

		return
	
	
        
	case 86:
       	 	r.Magzpsci = NewUnionNullFloat()

		return
	
	
        
	case 87:
       	 	r.Magzpsciunc = NewUnionNullFloat()

		return
	
	
        
	case 88:
       	 	r.Magzpscirms = NewUnionNullFloat()

		return
	
	
        
	
        
	case 90:
       	 	r.Clrcoeff = NewUnionNullFloat()

		return
	
	
        
	case 91:
       	 	r.Clrcounc = NewUnionNullFloat()

		return
	
	
        
	case 92:
       	 	r.Zpclrcov = NewUnionNullFloat()

		return
	
	
        
	case 93:
       	 	r.Zpmed = NewUnionNullFloat()

		return
	
	
        
	case 94:
       	 	r.Clrmed = NewUnionNullFloat()

		return
	
	
        
	case 95:
       	 	r.Clrrms = NewUnionNullFloat()

		return
	
	
        
	case 96:
       	 	r.Neargaia = NewUnionNullFloat()

		return
	
	
        
	case 97:
       	 	r.Neargaiabright = NewUnionNullFloat()

		return
	
	
        
	case 98:
       	 	r.Maggaia = NewUnionNullFloat()

		return
	
	
        
	case 99:
       	 	r.Maggaiabright = NewUnionNullFloat()

		return
	
	
        
	case 100:
       	 	r.Exptime = NewUnionNullFloat()

		return
	
	
        
	case 101:
       	 	r.Drb = NewUnionNullFloat()

		return
	
	
        
	
	}
	panic("Unknown field index")
}

func (_ *Candidate) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Candidate) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *Candidate) Finalize() { }


func (_ *Candidate) AvroCRC64Fingerprint() []byte {
  return []byte(CandidateAvroCRC64Fingerprint)
}
