// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     alert.avsc
 *     candidate.avsc
 *     cutout.avsc
 *     prv_candidate.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

// avro alert schema
type Prv_candidate struct {

	
	// Observation Julian date at start of exposure [days]
	
	
		Jd float64
	

	
	// Filter ID (1=g; 2=R; 3=i)
	
	
		Fid int32
	

	
	// Processing ID for image
	
	
		Pid int64
	

	
	// Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
	
	
		Diffmaglim *UnionNullFloat
	

	
	// filename of positive (sci minus ref) difference image
	
	
		Pdiffimfilename *UnionNullString
	

	
	// Principal investigator attached to program ID
	
	
		Programpi *UnionNullString
	

	
	// Program ID: encodes either public, collab, or caltech mode
	
	
		Programid int32
	

	
	// Candidate ID from operations DB
	
	
		Candid *UnionNullLong
	

	
	// t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
	
	
		Isdiffpos *UnionNullString
	

	
	// Internal pipeline table extraction ID
	
	
		Tblid *UnionNullLong
	

	
	// Night ID
	
	
		Nid *UnionNullInt
	

	
	// Readout channel ID [00 .. 63]
	
	
		Rcid *UnionNullInt
	

	
	// ZTF field ID
	
	
		Field *UnionNullInt
	

	
	// x-image position of candidate [pixels]
	
	
		Xpos *UnionNullFloat
	

	
	// y-image position of candidate [pixels]
	
	
		Ypos *UnionNullFloat
	

	
	// Right Ascension of candidate; J2000 [deg]
	
	
		Ra *UnionNullDouble
	

	
	// Declination of candidate; J2000 [deg]
	
	
		Dec *UnionNullDouble
	

	
	// Magnitude from PSF-fit photometry [mag]
	
	
		Magpsf *UnionNullFloat
	

	
	// 1-sigma uncertainty in magpsf [mag]
	
	
		Sigmapsf *UnionNullFloat
	

	
	// Reduced chi-square for PSF-fit
	
	
		Chipsf *UnionNullFloat
	

	
	// Aperture mag using 14 pixel diameter aperture [mag]
	
	
		Magap *UnionNullFloat
	

	
	// 1-sigma uncertainty in magap [mag]
	
	
		Sigmagap *UnionNullFloat
	

	
	// distance to nearest source in reference image PSF-catalog [pixels]
	
	
		Distnr *UnionNullFloat
	

	
	// magnitude of nearest source in reference image PSF-catalog [mag]
	
	
		Magnr *UnionNullFloat
	

	
	// 1-sigma uncertainty in magnr [mag]
	
	
		Sigmagnr *UnionNullFloat
	

	
	// DAOPhot chi parameter of nearest source in reference image PSF-catalog
	
	
		Chinr *UnionNullFloat
	

	
	// DAOPhot sharp parameter of nearest source in reference image PSF-catalog
	
	
		Sharpnr *UnionNullFloat
	

	
	// Local sky background estimate [DN]
	
	
		Sky *UnionNullFloat
	

	
	// Difference: magap - magpsf [mag]
	
	
		Magdiff *UnionNullFloat
	

	
	// Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
	
	
		Fwhm *UnionNullFloat
	

	
	// Star/Galaxy classification score from SExtractor
	
	
		Classtar *UnionNullFloat
	

	
	// Distance to nearest edge in image [pixels]
	
	
		Mindtoedge *UnionNullFloat
	

	
	// Difference: diffmaglim - magap [mag]
	
	
		Magfromlim *UnionNullFloat
	

	
	// Ratio: difffwhm / fwhm
	
	
		Seeratio *UnionNullFloat
	

	
	// Windowed profile RMS afloat major axis from SExtractor [pixels]
	
	
		Aimage *UnionNullFloat
	

	
	// Windowed profile RMS afloat minor axis from SExtractor [pixels]
	
	
		Bimage *UnionNullFloat
	

	
	// Ratio: aimage / fwhm
	
	
		Aimagerat *UnionNullFloat
	

	
	// Ratio: bimage / fwhm
	
	
		Bimagerat *UnionNullFloat
	

	
	// Ratio: aimage / bimage
	
	
		Elong *UnionNullFloat
	

	
	// number of negative pixels in a 5 x 5 pixel stamp
	
	
		Nneg *UnionNullInt
	

	
	// number of prior-tagged bad pixels in a 5 x 5 pixel stamp
	
	
		Nbad *UnionNullInt
	

	
	// RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
	
	
		Rb *UnionNullFloat
	

	
	// distance to nearest known solar system object if exists within 30 arcsec [arcsec]
	
	
		Ssdistnr *UnionNullFloat
	

	
	// magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
	
	
		Ssmagnr *UnionNullFloat
	

	
	// name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
	
	
		Ssnamenr *UnionNullString
	

	
	// Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
	
	
		Sumrat *UnionNullFloat
	

	
	// Aperture mag using 18 pixel diameter aperture [mag]
	
	
		Magapbig *UnionNullFloat
	

	
	// 1-sigma uncertainty in magapbig [mag]
	
	
		Sigmagapbig *UnionNullFloat
	

	
	// Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
	
	
		Ranr *UnionNullDouble
	

	
	// Declination of nearest source in reference image PSF-catalog; J2000 [deg]
	
	
		Decnr *UnionNullDouble
	

	
	// Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
	
	
		Scorr *UnionNullDouble
	

	
	// Magnitude zero point for photometry estimates [mag]
	
	
		Magzpsci *UnionNullFloat
	

	
	// Magnitude zero point uncertainty (in magzpsci) [mag]
	
	
		Magzpsciunc *UnionNullFloat
	

	
	// RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
	
	
		Magzpscirms *UnionNullFloat
	

	
	// Color coefficient from linear fit from photometric calibration of science image
	
	
		Clrcoeff *UnionNullFloat
	

	
	// Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
	
	
		Clrcounc *UnionNullFloat
	

	
	// version of RealBogus model/classifier used to assign rb quality score
	
	
		Rbversion string
	

}

const Prv_candidateAvroCRC64Fingerprint = "7B\x17\xc1\xbfM\x0f\xc1"

func NewPrv_candidate() (*Prv_candidate) {
	return &Prv_candidate{}
}

func DeserializePrv_candidate(r io.Reader) (*Prv_candidate, error) {
	t := NewPrv_candidate()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializePrv_candidateFromSchema(r io.Reader, schema string) (*Prv_candidate, error) {
	t := NewPrv_candidate()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writePrv_candidate(r *Prv_candidate, w io.Writer) error {
	var err error
	
	err = vm.WriteDouble( r.Jd, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Fid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Pid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Diffmaglim, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Pdiffimfilename, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Programpi, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Programid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.Candid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Isdiffpos, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.Tblid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Nid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Rcid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Field, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Xpos, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ypos, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Ra, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Dec, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magpsf, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmapsf, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Chipsf, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magap, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmagap, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Distnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmagnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Chinr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sharpnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sky, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magdiff, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Fwhm, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Classtar, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Mindtoedge, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magfromlim, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Seeratio, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Aimage, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Bimage, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Aimagerat, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Bimagerat, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Elong, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Nneg, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Nbad, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Rb, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ssdistnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ssmagnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Ssnamenr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sumrat, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magapbig, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmagapbig, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Ranr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Decnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.Scorr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpsci, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpsciunc, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpscirms, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrcoeff, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrcounc, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.Rbversion, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *Prv_candidate) Serialize(w io.Writer) error {
	return writePrv_candidate(r, w)
}

func (r *Prv_candidate) Schema() string {
	return "{\"doc\":\"avro alert schema\",\"fields\":[{\"doc\":\"Observation Julian date at start of exposure [days]\",\"name\":\"jd\",\"type\":\"double\"},{\"doc\":\"Filter ID (1=g; 2=R; 3=i)\",\"name\":\"fid\",\"type\":\"int\"},{\"doc\":\"Processing ID for image\",\"name\":\"pid\",\"type\":\"long\"},{\"default\":null,\"doc\":\"Expected 5-sigma mag limit in difference image based on global noise estimate [mag]\",\"name\":\"diffmaglim\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"filename of positive (sci minus ref) difference image\",\"name\":\"pdiffimfilename\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"doc\":\"Principal investigator attached to program ID\",\"name\":\"programpi\",\"type\":[\"null\",\"string\"]},{\"doc\":\"Program ID: encodes either public, collab, or caltech mode\",\"name\":\"programid\",\"type\":\"int\"},{\"doc\":\"Candidate ID from operations DB\",\"name\":\"candid\",\"type\":[\"null\",\"long\"]},{\"doc\":\"t or 1 =\\u003e candidate is from positive (sci minus ref) subtraction; f or 0 =\\u003e candidate is from negative (ref minus sci) subtraction\",\"name\":\"isdiffpos\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"doc\":\"Internal pipeline table extraction ID\",\"name\":\"tblid\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"doc\":\"Night ID\",\"name\":\"nid\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"Readout channel ID [00 .. 63]\",\"name\":\"rcid\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"ZTF field ID\",\"name\":\"field\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"x-image position of candidate [pixels]\",\"name\":\"xpos\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"y-image position of candidate [pixels]\",\"name\":\"ypos\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Right Ascension of candidate; J2000 [deg]\",\"name\":\"ra\",\"type\":[\"null\",\"double\"]},{\"doc\":\"Declination of candidate; J2000 [deg]\",\"name\":\"dec\",\"type\":[\"null\",\"double\"]},{\"doc\":\"Magnitude from PSF-fit photometry [mag]\",\"name\":\"magpsf\",\"type\":[\"null\",\"float\"]},{\"doc\":\"1-sigma uncertainty in magpsf [mag]\",\"name\":\"sigmapsf\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Reduced chi-square for PSF-fit\",\"name\":\"chipsf\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Aperture mag using 14 pixel diameter aperture [mag]\",\"name\":\"magap\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in magap [mag]\",\"name\":\"sigmagap\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"distance to nearest source in reference image PSF-catalog [pixels]\",\"name\":\"distnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"magnitude of nearest source in reference image PSF-catalog [mag]\",\"name\":\"magnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in magnr [mag]\",\"name\":\"sigmagnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"DAOPhot chi parameter of nearest source in reference image PSF-catalog\",\"name\":\"chinr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"DAOPhot sharp parameter of nearest source in reference image PSF-catalog\",\"name\":\"sharpnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Local sky background estimate [DN]\",\"name\":\"sky\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Difference: magap - magpsf [mag]\",\"name\":\"magdiff\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]\",\"name\":\"fwhm\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Star/Galaxy classification score from SExtractor\",\"name\":\"classtar\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Distance to nearest edge in image [pixels]\",\"name\":\"mindtoedge\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Difference: diffmaglim - magap [mag]\",\"name\":\"magfromlim\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: difffwhm / fwhm\",\"name\":\"seeratio\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Windowed profile RMS afloat major axis from SExtractor [pixels]\",\"name\":\"aimage\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Windowed profile RMS afloat minor axis from SExtractor [pixels]\",\"name\":\"bimage\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: aimage / fwhm\",\"name\":\"aimagerat\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: bimage / fwhm\",\"name\":\"bimagerat\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Ratio: aimage / bimage\",\"name\":\"elong\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"number of negative pixels in a 5 x 5 pixel stamp\",\"name\":\"nneg\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"number of prior-tagged bad pixels in a 5 x 5 pixel stamp\",\"name\":\"nbad\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable\",\"name\":\"rb\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"distance to nearest known solar system object if exists within 30 arcsec [arcsec]\",\"name\":\"ssdistnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]\",\"name\":\"ssmagnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"name of nearest known solar system object if exists within 30 arcsec (from MPC archive)\",\"name\":\"ssnamenr\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"doc\":\"Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers\",\"name\":\"sumrat\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Aperture mag using 18 pixel diameter aperture [mag]\",\"name\":\"magapbig\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in magapbig [mag]\",\"name\":\"sigmagapbig\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]\",\"name\":\"ranr\",\"type\":[\"null\",\"double\"]},{\"doc\":\"Declination of nearest source in reference image PSF-catalog; J2000 [deg]\",\"name\":\"decnr\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"doc\":\"Peak-pixel signal-to-noise ratio in point source matched-filtered detection image\",\"name\":\"scorr\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"doc\":\"Magnitude zero point for photometry estimates [mag]\",\"name\":\"magzpsci\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Magnitude zero point uncertainty (in magzpsci) [mag]\",\"name\":\"magzpsciunc\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]\",\"name\":\"magzpscirms\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Color coefficient from linear fit from photometric calibration of science image\",\"name\":\"clrcoeff\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Color coefficient uncertainty from linear fit (corresponding to clrcoeff)\",\"name\":\"clrcounc\",\"type\":[\"null\",\"float\"]},{\"doc\":\"version of RealBogus model/classifier used to assign rb quality score\",\"name\":\"rbversion\",\"type\":\"string\"}],\"name\":\"ztf.alert.prv_candidate\",\"type\":\"record\",\"version\":\"3.3\"}"
}

func (r *Prv_candidate) SchemaName() string {
	return "ztf.alert.prv_candidate"
}

func (_ *Prv_candidate) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *Prv_candidate) SetInt(v int32) { panic("Unsupported operation") }
func (_ *Prv_candidate) SetLong(v int64) { panic("Unsupported operation") }
func (_ *Prv_candidate) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *Prv_candidate) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *Prv_candidate) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *Prv_candidate) SetString(v string) { panic("Unsupported operation") }
func (_ *Prv_candidate) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Prv_candidate) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Double)(&r.Jd)
		
	
	case 1:
		
		
			return (*types.Int)(&r.Fid)
		
	
	case 2:
		
		
			return (*types.Long)(&r.Pid)
		
	
	case 3:
		
			r.Diffmaglim = NewUnionNullFloat()

		
		
			return r.Diffmaglim
		
	
	case 4:
		
			r.Pdiffimfilename = NewUnionNullString()

		
		
			return r.Pdiffimfilename
		
	
	case 5:
		
			r.Programpi = NewUnionNullString()

		
		
			return r.Programpi
		
	
	case 6:
		
		
			return (*types.Int)(&r.Programid)
		
	
	case 7:
		
			r.Candid = NewUnionNullLong()

		
		
			return r.Candid
		
	
	case 8:
		
			r.Isdiffpos = NewUnionNullString()

		
		
			return r.Isdiffpos
		
	
	case 9:
		
			r.Tblid = NewUnionNullLong()

		
		
			return r.Tblid
		
	
	case 10:
		
			r.Nid = NewUnionNullInt()

		
		
			return r.Nid
		
	
	case 11:
		
			r.Rcid = NewUnionNullInt()

		
		
			return r.Rcid
		
	
	case 12:
		
			r.Field = NewUnionNullInt()

		
		
			return r.Field
		
	
	case 13:
		
			r.Xpos = NewUnionNullFloat()

		
		
			return r.Xpos
		
	
	case 14:
		
			r.Ypos = NewUnionNullFloat()

		
		
			return r.Ypos
		
	
	case 15:
		
			r.Ra = NewUnionNullDouble()

		
		
			return r.Ra
		
	
	case 16:
		
			r.Dec = NewUnionNullDouble()

		
		
			return r.Dec
		
	
	case 17:
		
			r.Magpsf = NewUnionNullFloat()

		
		
			return r.Magpsf
		
	
	case 18:
		
			r.Sigmapsf = NewUnionNullFloat()

		
		
			return r.Sigmapsf
		
	
	case 19:
		
			r.Chipsf = NewUnionNullFloat()

		
		
			return r.Chipsf
		
	
	case 20:
		
			r.Magap = NewUnionNullFloat()

		
		
			return r.Magap
		
	
	case 21:
		
			r.Sigmagap = NewUnionNullFloat()

		
		
			return r.Sigmagap
		
	
	case 22:
		
			r.Distnr = NewUnionNullFloat()

		
		
			return r.Distnr
		
	
	case 23:
		
			r.Magnr = NewUnionNullFloat()

		
		
			return r.Magnr
		
	
	case 24:
		
			r.Sigmagnr = NewUnionNullFloat()

		
		
			return r.Sigmagnr
		
	
	case 25:
		
			r.Chinr = NewUnionNullFloat()

		
		
			return r.Chinr
		
	
	case 26:
		
			r.Sharpnr = NewUnionNullFloat()

		
		
			return r.Sharpnr
		
	
	case 27:
		
			r.Sky = NewUnionNullFloat()

		
		
			return r.Sky
		
	
	case 28:
		
			r.Magdiff = NewUnionNullFloat()

		
		
			return r.Magdiff
		
	
	case 29:
		
			r.Fwhm = NewUnionNullFloat()

		
		
			return r.Fwhm
		
	
	case 30:
		
			r.Classtar = NewUnionNullFloat()

		
		
			return r.Classtar
		
	
	case 31:
		
			r.Mindtoedge = NewUnionNullFloat()

		
		
			return r.Mindtoedge
		
	
	case 32:
		
			r.Magfromlim = NewUnionNullFloat()

		
		
			return r.Magfromlim
		
	
	case 33:
		
			r.Seeratio = NewUnionNullFloat()

		
		
			return r.Seeratio
		
	
	case 34:
		
			r.Aimage = NewUnionNullFloat()

		
		
			return r.Aimage
		
	
	case 35:
		
			r.Bimage = NewUnionNullFloat()

		
		
			return r.Bimage
		
	
	case 36:
		
			r.Aimagerat = NewUnionNullFloat()

		
		
			return r.Aimagerat
		
	
	case 37:
		
			r.Bimagerat = NewUnionNullFloat()

		
		
			return r.Bimagerat
		
	
	case 38:
		
			r.Elong = NewUnionNullFloat()

		
		
			return r.Elong
		
	
	case 39:
		
			r.Nneg = NewUnionNullInt()

		
		
			return r.Nneg
		
	
	case 40:
		
			r.Nbad = NewUnionNullInt()

		
		
			return r.Nbad
		
	
	case 41:
		
			r.Rb = NewUnionNullFloat()

		
		
			return r.Rb
		
	
	case 42:
		
			r.Ssdistnr = NewUnionNullFloat()

		
		
			return r.Ssdistnr
		
	
	case 43:
		
			r.Ssmagnr = NewUnionNullFloat()

		
		
			return r.Ssmagnr
		
	
	case 44:
		
			r.Ssnamenr = NewUnionNullString()

		
		
			return r.Ssnamenr
		
	
	case 45:
		
			r.Sumrat = NewUnionNullFloat()

		
		
			return r.Sumrat
		
	
	case 46:
		
			r.Magapbig = NewUnionNullFloat()

		
		
			return r.Magapbig
		
	
	case 47:
		
			r.Sigmagapbig = NewUnionNullFloat()

		
		
			return r.Sigmagapbig
		
	
	case 48:
		
			r.Ranr = NewUnionNullDouble()

		
		
			return r.Ranr
		
	
	case 49:
		
			r.Decnr = NewUnionNullDouble()

		
		
			return r.Decnr
		
	
	case 50:
		
			r.Scorr = NewUnionNullDouble()

		
		
			return r.Scorr
		
	
	case 51:
		
			r.Magzpsci = NewUnionNullFloat()

		
		
			return r.Magzpsci
		
	
	case 52:
		
			r.Magzpsciunc = NewUnionNullFloat()

		
		
			return r.Magzpsciunc
		
	
	case 53:
		
			r.Magzpscirms = NewUnionNullFloat()

		
		
			return r.Magzpscirms
		
	
	case 54:
		
			r.Clrcoeff = NewUnionNullFloat()

		
		
			return r.Clrcoeff
		
	
	case 55:
		
			r.Clrcounc = NewUnionNullFloat()

		
		
			return r.Clrcounc
		
	
	case 56:
		
		
			return (*types.String)(&r.Rbversion)
		
	
	}
	panic("Unknown field index")
}

func (r *Prv_candidate) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	case 3:
       	 	r.Diffmaglim = NewUnionNullFloat()

		return
	
	
        
	case 4:
       	 	r.Pdiffimfilename = NewUnionNullString()

		return
	
	
        
	case 5:
       	 	r.Programpi = NewUnionNullString()

		return
	
	
        
	
        
	
        
	
        
	case 9:
       	 	r.Tblid = NewUnionNullLong()

		return
	
	
        
	case 10:
       	 	r.Nid = NewUnionNullInt()

		return
	
	
        
	case 11:
       	 	r.Rcid = NewUnionNullInt()

		return
	
	
        
	case 12:
       	 	r.Field = NewUnionNullInt()

		return
	
	
        
	case 13:
       	 	r.Xpos = NewUnionNullFloat()

		return
	
	
        
	case 14:
       	 	r.Ypos = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	
        
	
        
	case 19:
       	 	r.Chipsf = NewUnionNullFloat()

		return
	
	
        
	case 20:
       	 	r.Magap = NewUnionNullFloat()

		return
	
	
        
	case 21:
       	 	r.Sigmagap = NewUnionNullFloat()

		return
	
	
        
	case 22:
       	 	r.Distnr = NewUnionNullFloat()

		return
	
	
        
	case 23:
       	 	r.Magnr = NewUnionNullFloat()

		return
	
	
        
	case 24:
       	 	r.Sigmagnr = NewUnionNullFloat()

		return
	
	
        
	case 25:
       	 	r.Chinr = NewUnionNullFloat()

		return
	
	
        
	case 26:
       	 	r.Sharpnr = NewUnionNullFloat()

		return
	
	
        
	case 27:
       	 	r.Sky = NewUnionNullFloat()

		return
	
	
        
	case 28:
       	 	r.Magdiff = NewUnionNullFloat()

		return
	
	
        
	case 29:
       	 	r.Fwhm = NewUnionNullFloat()

		return
	
	
        
	case 30:
       	 	r.Classtar = NewUnionNullFloat()

		return
	
	
        
	case 31:
       	 	r.Mindtoedge = NewUnionNullFloat()

		return
	
	
        
	case 32:
       	 	r.Magfromlim = NewUnionNullFloat()

		return
	
	
        
	case 33:
       	 	r.Seeratio = NewUnionNullFloat()

		return
	
	
        
	case 34:
       	 	r.Aimage = NewUnionNullFloat()

		return
	
	
        
	case 35:
       	 	r.Bimage = NewUnionNullFloat()

		return
	
	
        
	case 36:
       	 	r.Aimagerat = NewUnionNullFloat()

		return
	
	
        
	case 37:
       	 	r.Bimagerat = NewUnionNullFloat()

		return
	
	
        
	case 38:
       	 	r.Elong = NewUnionNullFloat()

		return
	
	
        
	case 39:
       	 	r.Nneg = NewUnionNullInt()

		return
	
	
        
	case 40:
       	 	r.Nbad = NewUnionNullInt()

		return
	
	
        
	case 41:
       	 	r.Rb = NewUnionNullFloat()

		return
	
	
        
	case 42:
       	 	r.Ssdistnr = NewUnionNullFloat()

		return
	
	
        
	case 43:
       	 	r.Ssmagnr = NewUnionNullFloat()

		return
	
	
        
	case 44:
       	 	r.Ssnamenr = NewUnionNullString()

		return
	
	
        
	case 45:
       	 	r.Sumrat = NewUnionNullFloat()

		return
	
	
        
	case 46:
       	 	r.Magapbig = NewUnionNullFloat()

		return
	
	
        
	case 47:
       	 	r.Sigmagapbig = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	case 50:
       	 	r.Scorr = NewUnionNullDouble()

		return
	
	
        
	case 51:
       	 	r.Magzpsci = NewUnionNullFloat()

		return
	
	
        
	case 52:
       	 	r.Magzpsciunc = NewUnionNullFloat()

		return
	
	
        
	case 53:
       	 	r.Magzpscirms = NewUnionNullFloat()

		return
	
	
        
	case 54:
       	 	r.Clrcoeff = NewUnionNullFloat()

		return
	
	
        
	case 55:
       	 	r.Clrcounc = NewUnionNullFloat()

		return
	
	
        
	
	}
	panic("Unknown field index")
}

func (_ *Prv_candidate) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Prv_candidate) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *Prv_candidate) Finalize() { }


func (_ *Prv_candidate) AvroCRC64Fingerprint() []byte {
  return []byte(Prv_candidateAvroCRC64Fingerprint)
}
