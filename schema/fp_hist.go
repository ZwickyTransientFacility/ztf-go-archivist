// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     alert.avsc
 *     candidate.avsc
 *     cutout.avsc
 *     fp_hist.avsc
 *     prv_candidate.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

// avro alert schema
type Fp_hist struct {

	
	// ZTF field ID
	
	
		Field *UnionNullInt
	

	
	// Readout channel ID [00 .. 63]
	
	
		Rcid *UnionNullInt
	

	
	// Filter ID (1=g; 2=R; 3=i)
	
	
		Fid int32
	

	
	// Processing ID for image
	
	
		Pid int64
	

	
	// Processing ID for reference image to facilitate archive retrieval
	
	
		Rfid int64
	

	
	// Effective FWHM of sci image [pixels]
	
	
		Sciinpseeing *UnionNullFloat
	

	
	// Background level in sci image [DN]
	
	
		Scibckgnd *UnionNullFloat
	

	
	// Robust sigma per pixel in sci image [DN]
	
	
		Scisigpix *UnionNullFloat
	

	
	// Magnitude zero point for photometry estimates [mag]
	
	
		Magzpsci *UnionNullFloat
	

	
	// Magnitude zero point uncertainty (in magzpsci) [mag]
	
	
		Magzpsciunc *UnionNullFloat
	

	
	// RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
	
	
		Magzpscirms *UnionNullFloat
	

	
	// Color coefficient from linear fit from photometric calibration of science image
	
	
		Clrcoeff *UnionNullFloat
	

	
	// Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
	
	
		Clrcounc *UnionNullFloat
	

	
	// Integration time of camera exposure [sec]
	
	
		Exptime *UnionNullFloat
	

	
	// Full sci image astrometric RMS along R.A. with respect to Gaia1 [arcsec]
	
	
		Adpctdif1 *UnionNullFloat
	

	
	// Full sci image astrometric RMS along Dec. with respect to Gaia1 [arcsec]
	
	
		Adpctdif2 *UnionNullFloat
	

	
	// Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
	
	
		Diffmaglim *UnionNullFloat
	

	
	// Program ID: encodes either public, collab, or caltech mode
	
	
		Programid int32
	

	
	// Observation Julian date at start of exposure [days]
	
	
		Jd float64
	

	
	// Forced difference image PSF-fit flux [DN]
	
	
		Forcediffimflux *UnionNullFloat
	

	
	// 1-sigma uncertainty in forcediffimflux [DN]
	
	
		Forcediffimfluxunc *UnionNullFloat
	

	
	// Forced photometry processing status codes (0 => no warnings); see documentation
	
	
		Procstatus *UnionNullString
	

	
	// distance to nearest source in reference image PSF-catalog [arcsec]
	
	
		Distnr *UnionNullFloat
	

	
	// Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
	
	
		Ranr float64
	

	
	// Declination of nearest source in reference image PSF-catalog; J2000 [deg]
	
	
		Decnr float64
	

	
	// magnitude of nearest source in reference image PSF-catalog [mag]
	
	
		Magnr *UnionNullFloat
	

	
	// 1-sigma uncertainty in magnr [mag]
	
	
		Sigmagnr *UnionNullFloat
	

	
	// DAOPhot chi parameter of nearest source in reference image PSF-catalog
	
	
		Chinr *UnionNullFloat
	

	
	// DAOPhot sharp parameter of nearest source in reference image PSF-catalog
	
	
		Sharpnr *UnionNullFloat
	

}

const Fp_histAvroCRC64Fingerprint = "l’Ωiy\x19\xa2g"

func NewFp_hist() (*Fp_hist) {
	return &Fp_hist{}
}

func DeserializeFp_hist(r io.Reader) (*Fp_hist, error) {
	t := NewFp_hist()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeFp_histFromSchema(r io.Reader, schema string) (*Fp_hist, error) {
	t := NewFp_hist()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeFp_hist(r *Fp_hist, w io.Writer) error {
	var err error
	
	err = writeUnionNullInt( r.Field, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.Rcid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Fid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Pid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Rfid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sciinpseeing, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Scibckgnd, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Scisigpix, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpsci, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpsciunc, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magzpscirms, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrcoeff, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Clrcounc, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Exptime, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Adpctdif1, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Adpctdif2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Diffmaglim, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Programid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Jd, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Forcediffimflux, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Forcediffimfluxunc, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.Procstatus, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Distnr, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Ranr, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Decnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Magnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sigmagnr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Chinr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Sharpnr, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *Fp_hist) Serialize(w io.Writer) error {
	return writeFp_hist(r, w)
}

func (r *Fp_hist) Schema() string {
	return "{\"doc\":\"avro alert schema\",\"fields\":[{\"default\":null,\"doc\":\"ZTF field ID\",\"name\":\"field\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"doc\":\"Readout channel ID [00 .. 63]\",\"name\":\"rcid\",\"type\":[\"null\",\"int\"]},{\"doc\":\"Filter ID (1=g; 2=R; 3=i)\",\"name\":\"fid\",\"type\":\"int\"},{\"doc\":\"Processing ID for image\",\"name\":\"pid\",\"type\":\"long\"},{\"doc\":\"Processing ID for reference image to facilitate archive retrieval\",\"name\":\"rfid\",\"type\":\"long\"},{\"default\":null,\"doc\":\"Effective FWHM of sci image [pixels]\",\"name\":\"sciinpseeing\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Background level in sci image [DN]\",\"name\":\"scibckgnd\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Robust sigma per pixel in sci image [DN]\",\"name\":\"scisigpix\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Magnitude zero point for photometry estimates [mag]\",\"name\":\"magzpsci\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Magnitude zero point uncertainty (in magzpsci) [mag]\",\"name\":\"magzpsciunc\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]\",\"name\":\"magzpscirms\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Color coefficient from linear fit from photometric calibration of science image\",\"name\":\"clrcoeff\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Color coefficient uncertainty from linear fit (corresponding to clrcoeff)\",\"name\":\"clrcounc\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Integration time of camera exposure [sec]\",\"name\":\"exptime\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Full sci image astrometric RMS along R.A. with respect to Gaia1 [arcsec]\",\"name\":\"adpctdif1\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Full sci image astrometric RMS along Dec. with respect to Gaia1 [arcsec]\",\"name\":\"adpctdif2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Expected 5-sigma mag limit in difference image based on global noise estimate [mag]\",\"name\":\"diffmaglim\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Program ID: encodes either public, collab, or caltech mode\",\"name\":\"programid\",\"type\":\"int\"},{\"doc\":\"Observation Julian date at start of exposure [days]\",\"name\":\"jd\",\"type\":\"double\"},{\"default\":null,\"doc\":\"Forced difference image PSF-fit flux [DN]\",\"name\":\"forcediffimflux\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in forcediffimflux [DN]\",\"name\":\"forcediffimfluxunc\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"Forced photometry processing status codes (0 =\\u003e no warnings); see documentation\",\"name\":\"procstatus\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"doc\":\"distance to nearest source in reference image PSF-catalog [arcsec]\",\"name\":\"distnr\",\"type\":[\"null\",\"float\"]},{\"doc\":\"Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]\",\"name\":\"ranr\",\"type\":\"double\"},{\"doc\":\"Declination of nearest source in reference image PSF-catalog; J2000 [deg]\",\"name\":\"decnr\",\"type\":\"double\"},{\"default\":null,\"doc\":\"magnitude of nearest source in reference image PSF-catalog [mag]\",\"name\":\"magnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"1-sigma uncertainty in magnr [mag]\",\"name\":\"sigmagnr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"DAOPhot chi parameter of nearest source in reference image PSF-catalog\",\"name\":\"chinr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"doc\":\"DAOPhot sharp parameter of nearest source in reference image PSF-catalog\",\"name\":\"sharpnr\",\"type\":[\"null\",\"float\"]}],\"name\":\"ztf.alert.fp_hist\",\"type\":\"record\",\"version\":\"4.02\"}"
}

func (r *Fp_hist) SchemaName() string {
	return "ztf.alert.fp_hist"
}

func (_ *Fp_hist) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *Fp_hist) SetInt(v int32) { panic("Unsupported operation") }
func (_ *Fp_hist) SetLong(v int64) { panic("Unsupported operation") }
func (_ *Fp_hist) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *Fp_hist) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *Fp_hist) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *Fp_hist) SetString(v string) { panic("Unsupported operation") }
func (_ *Fp_hist) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Fp_hist) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.Field = NewUnionNullInt()

		
		
			return r.Field
		
	
	case 1:
		
			r.Rcid = NewUnionNullInt()

		
		
			return r.Rcid
		
	
	case 2:
		
		
			return (*types.Int)(&r.Fid)
		
	
	case 3:
		
		
			return (*types.Long)(&r.Pid)
		
	
	case 4:
		
		
			return (*types.Long)(&r.Rfid)
		
	
	case 5:
		
			r.Sciinpseeing = NewUnionNullFloat()

		
		
			return r.Sciinpseeing
		
	
	case 6:
		
			r.Scibckgnd = NewUnionNullFloat()

		
		
			return r.Scibckgnd
		
	
	case 7:
		
			r.Scisigpix = NewUnionNullFloat()

		
		
			return r.Scisigpix
		
	
	case 8:
		
			r.Magzpsci = NewUnionNullFloat()

		
		
			return r.Magzpsci
		
	
	case 9:
		
			r.Magzpsciunc = NewUnionNullFloat()

		
		
			return r.Magzpsciunc
		
	
	case 10:
		
			r.Magzpscirms = NewUnionNullFloat()

		
		
			return r.Magzpscirms
		
	
	case 11:
		
			r.Clrcoeff = NewUnionNullFloat()

		
		
			return r.Clrcoeff
		
	
	case 12:
		
			r.Clrcounc = NewUnionNullFloat()

		
		
			return r.Clrcounc
		
	
	case 13:
		
			r.Exptime = NewUnionNullFloat()

		
		
			return r.Exptime
		
	
	case 14:
		
			r.Adpctdif1 = NewUnionNullFloat()

		
		
			return r.Adpctdif1
		
	
	case 15:
		
			r.Adpctdif2 = NewUnionNullFloat()

		
		
			return r.Adpctdif2
		
	
	case 16:
		
			r.Diffmaglim = NewUnionNullFloat()

		
		
			return r.Diffmaglim
		
	
	case 17:
		
		
			return (*types.Int)(&r.Programid)
		
	
	case 18:
		
		
			return (*types.Double)(&r.Jd)
		
	
	case 19:
		
			r.Forcediffimflux = NewUnionNullFloat()

		
		
			return r.Forcediffimflux
		
	
	case 20:
		
			r.Forcediffimfluxunc = NewUnionNullFloat()

		
		
			return r.Forcediffimfluxunc
		
	
	case 21:
		
			r.Procstatus = NewUnionNullString()

		
		
			return r.Procstatus
		
	
	case 22:
		
			r.Distnr = NewUnionNullFloat()

		
		
			return r.Distnr
		
	
	case 23:
		
		
			return (*types.Double)(&r.Ranr)
		
	
	case 24:
		
		
			return (*types.Double)(&r.Decnr)
		
	
	case 25:
		
			r.Magnr = NewUnionNullFloat()

		
		
			return r.Magnr
		
	
	case 26:
		
			r.Sigmagnr = NewUnionNullFloat()

		
		
			return r.Sigmagnr
		
	
	case 27:
		
			r.Chinr = NewUnionNullFloat()

		
		
			return r.Chinr
		
	
	case 28:
		
			r.Sharpnr = NewUnionNullFloat()

		
		
			return r.Sharpnr
		
	
	}
	panic("Unknown field index")
}

func (r *Fp_hist) SetDefault(i int) {
	switch (i) {
	
        
	case 0:
       	 	r.Field = NewUnionNullInt()

		return
	
	
        
	case 1:
       	 	r.Rcid = NewUnionNullInt()

		return
	
	
        
	
        
	
        
	
        
	case 5:
       	 	r.Sciinpseeing = NewUnionNullFloat()

		return
	
	
        
	case 6:
       	 	r.Scibckgnd = NewUnionNullFloat()

		return
	
	
        
	case 7:
       	 	r.Scisigpix = NewUnionNullFloat()

		return
	
	
        
	case 8:
       	 	r.Magzpsci = NewUnionNullFloat()

		return
	
	
        
	case 9:
       	 	r.Magzpsciunc = NewUnionNullFloat()

		return
	
	
        
	case 10:
       	 	r.Magzpscirms = NewUnionNullFloat()

		return
	
	
        
	case 11:
       	 	r.Clrcoeff = NewUnionNullFloat()

		return
	
	
        
	case 12:
       	 	r.Clrcounc = NewUnionNullFloat()

		return
	
	
        
	case 13:
       	 	r.Exptime = NewUnionNullFloat()

		return
	
	
        
	case 14:
       	 	r.Adpctdif1 = NewUnionNullFloat()

		return
	
	
        
	case 15:
       	 	r.Adpctdif2 = NewUnionNullFloat()

		return
	
	
        
	case 16:
       	 	r.Diffmaglim = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	case 19:
       	 	r.Forcediffimflux = NewUnionNullFloat()

		return
	
	
        
	case 20:
       	 	r.Forcediffimfluxunc = NewUnionNullFloat()

		return
	
	
        
	case 21:
       	 	r.Procstatus = NewUnionNullString()

		return
	
	
        
	case 22:
       	 	r.Distnr = NewUnionNullFloat()

		return
	
	
        
	
        
	
        
	case 25:
       	 	r.Magnr = NewUnionNullFloat()

		return
	
	
        
	case 26:
       	 	r.Sigmagnr = NewUnionNullFloat()

		return
	
	
        
	case 27:
       	 	r.Chinr = NewUnionNullFloat()

		return
	
	
        
	case 28:
       	 	r.Sharpnr = NewUnionNullFloat()

		return
	
	
	}
	panic("Unknown field index")
}

func (_ *Fp_hist) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Fp_hist) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *Fp_hist) Finalize() { }


func (_ *Fp_hist) AvroCRC64Fingerprint() []byte {
  return []byte(Fp_histAvroCRC64Fingerprint)
}
